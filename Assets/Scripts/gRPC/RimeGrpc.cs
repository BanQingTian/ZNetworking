// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rime.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zrime {
  public static partial class Exhibit
  {
    static readonly string __ServiceName = "zrime.Exhibit";

    static readonly grpc::Marshaller<global::Zrime.JoinRequest> __Marshaller_zrime_JoinRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.JoinRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.JoinResponse> __Marshaller_zrime_JoinResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.JoinResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.SyncRequest> __Marshaller_zrime_SyncRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.SyncRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.SyncResponse> __Marshaller_zrime_SyncResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.SyncResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.LeaveRequest> __Marshaller_zrime_LeaveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.LeaveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.LeaveResponse> __Marshaller_zrime_LeaveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.LeaveResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.Connect> __Marshaller_zrime_Connect = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.Connect.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.Message> __Marshaller_zrime_Message = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.Message.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zrime.Close> __Marshaller_zrime_Close = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zrime.Close.Parser.ParseFrom);

    static readonly grpc::Method<global::Zrime.JoinRequest, global::Zrime.JoinResponse> __Method_Join = new grpc::Method<global::Zrime.JoinRequest, global::Zrime.JoinResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Join",
        __Marshaller_zrime_JoinRequest,
        __Marshaller_zrime_JoinResponse);

    static readonly grpc::Method<global::Zrime.SyncRequest, global::Zrime.SyncResponse> __Method_SyncPose = new grpc::Method<global::Zrime.SyncRequest, global::Zrime.SyncResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SyncPose",
        __Marshaller_zrime_SyncRequest,
        __Marshaller_zrime_SyncResponse);

    static readonly grpc::Method<global::Zrime.LeaveRequest, global::Zrime.LeaveResponse> __Method_Leave = new grpc::Method<global::Zrime.LeaveRequest, global::Zrime.LeaveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Leave",
        __Marshaller_zrime_LeaveRequest,
        __Marshaller_zrime_LeaveResponse);

    static readonly grpc::Method<global::Zrime.Connect, global::Zrime.Message> __Method_CreateStream = new grpc::Method<global::Zrime.Connect, global::Zrime.Message>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CreateStream",
        __Marshaller_zrime_Connect,
        __Marshaller_zrime_Message);

    static readonly grpc::Method<global::Zrime.Message, global::Zrime.Close> __Method_BroadcastMessage = new grpc::Method<global::Zrime.Message, global::Zrime.Close>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastMessage",
        __Marshaller_zrime_Message,
        __Marshaller_zrime_Close);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zrime.RimeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Exhibit</summary>
    [grpc::BindServiceMethod(typeof(Exhibit), "BindService")]
    public abstract partial class ExhibitBase
    {
      /// <summary>
      /// 加入房间
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Zrime.JoinResponse> Join(global::Zrime.JoinRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 同步位置
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Zrime.SyncResponse> SyncPose(global::Zrime.SyncRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 离开房间
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Zrime.LeaveResponse> Leave(global::Zrime.LeaveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 创建Stream 并绑定
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task CreateStream(global::Zrime.Connect request, grpc::IServerStreamWriter<global::Zrime.Message> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 广播消息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Zrime.Close> BroadcastMessage(global::Zrime.Message request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Exhibit</summary>
    public partial class ExhibitClient : grpc::ClientBase<ExhibitClient>
    {
      /// <summary>Creates a new client for Exhibit</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ExhibitClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Exhibit that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ExhibitClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ExhibitClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ExhibitClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 加入房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.JoinResponse Join(global::Zrime.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Join(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 加入房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.JoinResponse Join(global::Zrime.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Join, null, options, request);
      }
      /// <summary>
      /// 加入房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.JoinResponse> JoinAsync(global::Zrime.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 加入房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.JoinResponse> JoinAsync(global::Zrime.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Join, null, options, request);
      }
      /// <summary>
      /// 同步位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.SyncResponse SyncPose(global::Zrime.SyncRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncPose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 同步位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.SyncResponse SyncPose(global::Zrime.SyncRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SyncPose, null, options, request);
      }
      /// <summary>
      /// 同步位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.SyncResponse> SyncPoseAsync(global::Zrime.SyncRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncPoseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 同步位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.SyncResponse> SyncPoseAsync(global::Zrime.SyncRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SyncPose, null, options, request);
      }
      /// <summary>
      /// 离开房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.LeaveResponse Leave(global::Zrime.LeaveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Leave(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 离开房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.LeaveResponse Leave(global::Zrime.LeaveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Leave, null, options, request);
      }
      /// <summary>
      /// 离开房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.LeaveResponse> LeaveAsync(global::Zrime.LeaveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 离开房间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.LeaveResponse> LeaveAsync(global::Zrime.LeaveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Leave, null, options, request);
      }
      /// <summary>
      /// 创建Stream 并绑定
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Zrime.Message> CreateStream(global::Zrime.Connect request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建Stream 并绑定
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Zrime.Message> CreateStream(global::Zrime.Connect request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CreateStream, null, options, request);
      }
      /// <summary>
      /// 广播消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.Close BroadcastMessage(global::Zrime.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 广播消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Zrime.Close BroadcastMessage(global::Zrime.Message request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastMessage, null, options, request);
      }
      /// <summary>
      /// 广播消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.Close> BroadcastMessageAsync(global::Zrime.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 广播消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Zrime.Close> BroadcastMessageAsync(global::Zrime.Message request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastMessage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ExhibitClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExhibitClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ExhibitBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Join, serviceImpl.Join)
          .AddMethod(__Method_SyncPose, serviceImpl.SyncPose)
          .AddMethod(__Method_Leave, serviceImpl.Leave)
          .AddMethod(__Method_CreateStream, serviceImpl.CreateStream)
          .AddMethod(__Method_BroadcastMessage, serviceImpl.BroadcastMessage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ExhibitBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Join, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zrime.JoinRequest, global::Zrime.JoinResponse>(serviceImpl.Join));
      serviceBinder.AddMethod(__Method_SyncPose, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zrime.SyncRequest, global::Zrime.SyncResponse>(serviceImpl.SyncPose));
      serviceBinder.AddMethod(__Method_Leave, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zrime.LeaveRequest, global::Zrime.LeaveResponse>(serviceImpl.Leave));
      serviceBinder.AddMethod(__Method_CreateStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Zrime.Connect, global::Zrime.Message>(serviceImpl.CreateStream));
      serviceBinder.AddMethod(__Method_BroadcastMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zrime.Message, global::Zrime.Close>(serviceImpl.BroadcastMessage));
    }

  }
}
#endregion
